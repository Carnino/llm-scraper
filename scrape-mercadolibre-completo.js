import { chromium } from 'playwright'
import { z } from 'zod'
import { openai } from '@ai-sdk/openai'
import LLMScraper from './dist/index.js'
import dotenv from 'dotenv'

dotenv.config()

// Configuraci√≥n del scraper
const CONFIG = {
  maxPaginas: 3,           // N√∫mero m√°ximo de p√°ginas a scrapear
  delayEntrePaginas: 2000,  // Delay entre p√°ginas (ms)
  timeoutPagina: 60000,     // Timeout para cargar p√°gina (ms)
  delayCarga: 5000,         // Delay adicional para cargar contenido (ms)
  headless: false,          // Mostrar navegador (false) o ejecutar en segundo plano (true)
  guardarPorPagina: true,   // Guardar resultados por p√°gina individual
  maxReintentos: 3,         // M√°ximo n√∫mero de reintentos por p√°gina
  maxProductosPorPagina: 100, // M√°ximo n√∫mero de productos a extraer por p√°gina
}

async function main() {
  try {
    if (!process.env.OPENAI_API_KEY) {
      throw new Error('OPENAI_API_KEY no est√° configurada en el archivo .env')
    }

    console.log('üöÄ Iniciando scraping COMPLETO de Mercado Libre con GPT-4o Mini...')
    console.log(`üìä Configuraci√≥n: ${CONFIG.maxPaginas} p√°ginas, delay: ${CONFIG.delayEntrePaginas}ms`)
    console.log(`üõçÔ∏è M√°ximo productos por p√°gina: ${CONFIG.maxProductosPorPagina}`)

    const browser = await chromium.launch({ headless: CONFIG.headless })
    const page = await browser.newPage()
    const llm = openai.chat('gpt-4o-mini')
    const scraper = new LLMScraper(llm)

    // Esquema con instrucciones MUY espec√≠ficas para extraer TODOS los productos
    const schema = z.object({
      productos: z.array(
        z.object({
          titulo: z.string().describe('T√≠tulo completo del producto'),
          precio: z.string().describe('Precio actual del producto'),
          precio_anterior: z.string().optional().describe('Precio anterior si hay descuento'),
          descuento: z.string().optional().describe('Porcentaje de descuento'),
          vendedor: z.string().optional().describe('Quien es el vendedor'),
          envio_gratis: z.boolean().optional().describe('Si tiene env√≠o gratis'),
          calificacion: z.string().optional().describe('Calificaci√≥n del vendedor'),
          vendidos: z.string().optional().describe('Cantidad vendida'),
          enlace: z.string().describe('Enlace completo al producto'),
        })
      ).min(1).max(CONFIG.maxProductosPorPagina).describe(`
        INSTRUCCIONES CR√çTICAS PARA EXTRAER TODOS LOS PRODUCTOS:
        
        1. BUSCA Y EXTRAE TODOS los productos visibles en la p√°gina
        2. NO limites la cantidad - extrae CADA producto que veas
        3. Busca en TODAS estas ubicaciones:
           - Tarjetas de productos (cards, items, productos)
           - Listas de ofertas
           - Grid de productos
           - Elementos con precios
           - Cualquier elemento que contenga informaci√≥n de producto
        
        4. Cada p√°gina de Mercado Libre tiene T√çPICAMENTE 20-50 productos
        5. Si encuentras menos de 10 productos, busca m√°s profundamente
        6. Incluye productos con y sin descuento
        7. Incluye productos con y sin env√≠o gratis
        
        IMPORTANTE: Debes extraer TODOS los productos, no solo los primeros que veas.
        Si la p√°gina tiene 30 productos, debes extraer los 30.
        Si la p√°gina tiene 50 productos, debes extraer los 50.
        
        NO te detengas hasta haber extra√≠do TODOS los productos visibles.
      `),
      pagina_actual: z.number().describe('N√∫mero de p√°gina actual'),
      total_productos: z.number().describe('Total de productos encontrados en esta p√°gina'),
      hay_siguiente_pagina: z.boolean().describe('Si hay una p√°gina siguiente disponible'),
      comentarios_extraccion: z.string().describe('Comentarios sobre el proceso de extracci√≥n'),
    })

    const todasLasPaginas = []
    const errores = []
    let paginasExitosas = 0

    for (let pagina = 1; pagina <= CONFIG.maxPaginas; pagina++) {
      let reintentos = 0
      let exito = false

      while (reintentos < CONFIG.maxReintentos && !exito) {
        try {
          console.log(`\nüìÑ Procesando p√°gina ${pagina} de ${CONFIG.maxPaginas} (intento ${reintentos + 1})...`)
          
          // Construir URL
          let url
          if (pagina === 1) {
            url = 'https://www.mercadolibre.com.ar/ofertas?promotion_type=deal_of_the_day#filter_applied=promotion_type&filter_position=3&origin=qcat'
          } else {
            url = `https://www.mercadolibre.com.ar/ofertas?promotion_type=deal_of_the_day&page=${pagina}#filter_applied=promotion_type&filter_position=3&origin=qcat`
          }

          console.log(`üåê Navegando a: ${url}`)
          await page.goto(url, { 
            waitUntil: 'domcontentloaded', 
            timeout: CONFIG.timeoutPagina 
          })

          // Esperar a que cargue el contenido completamente
          await page.waitForTimeout(CONFIG.delayCarga)

          // Hacer scroll para cargar contenido lazy
          console.log(`üìú Haciendo scroll para cargar todo el contenido...`)
          await page.evaluate(() => {
            window.scrollTo(0, document.body.scrollHeight)
            return new Promise(resolve => setTimeout(resolve, 2000))
          })

          // Verificar si la p√°gina tiene contenido
          const contenido = await page.content()
          if (!contenido.includes('producto') && !contenido.includes('item')) {
            console.log(`‚ö†Ô∏è P√°gina ${pagina} parece estar vac√≠a, saltando...`)
            break
          }

          console.log(`ü§ñ Ejecutando scraper en p√°gina ${pagina}...`)
          console.log(`üîç EXTRAYENDO TODOS los productos visibles...`)

          const { data } = await scraper.run(page, schema, {
            format: 'html',
          })

          console.log(`‚úÖ P√°gina ${pagina} completada. Productos encontrados: ${data.total_productos}`)
          
          // Verificar si extrajo suficientes productos
          if (data.total_productos < 15) {
            console.log(`‚ö†Ô∏è ADVERTENCIA: Solo se encontraron ${data.total_productos} productos en la p√°gina ${pagina}`)
            console.log(`üí° Esto es inusual para Mercado Libre. Revisando...`)
            console.log(`üìù Comentarios: ${data.comentarios_extraccion || 'Sin comentarios'}`)
          } else {
            console.log(`üéâ ¬°Excelente! Se encontraron ${data.total_productos} productos en la p√°gina ${pagina}`)
          }
          
          // Agregar informaci√≥n de la p√°gina
          const paginaData = {
            numero_pagina: pagina,
            url: url,
            productos: data.productos,
            total_productos: data.total_productos,
            hay_siguiente_pagina: data.hay_siguiente_pagina,
            timestamp: new Date().toISOString(),
            comentarios_extraccion: data.comentarios_extraccion || "Sin comentarios"
          }
          
          todasLasPaginas.push(paginaData)
          paginasExitosas++

          // Guardar resultados por p√°gina si est√° habilitado
          if (CONFIG.guardarPorPagina) {
            const fs = await import('fs')
            fs.writeFileSync(
              `resultados_completos_pagina_${pagina}.json`, 
              JSON.stringify(paginaData, null, 2)
            )
          }

          exito = true

        } catch (error) {
          reintentos++
          console.error(`‚ùå Error en p√°gina ${pagina} (intento ${reintentos}):`, error.message)
          
          if (reintentos >= CONFIG.maxReintentos) {
            errores.push({
              pagina: pagina,
              error: error.message,
              timestamp: new Date().toISOString()
            })
            console.log(`‚ö†Ô∏è Saltando p√°gina ${pagina} despu√©s de ${CONFIG.maxReintentos} intentos fallidos`)
          } else {
            console.log(`üîÑ Reintentando p√°gina ${pagina} en 5 segundos...`)
            await page.waitForTimeout(5000)
          }
        }
      }

      // Delay entre p√°ginas
      if (pagina < CONFIG.maxPaginas) {
        console.log(`‚è≥ Esperando ${CONFIG.delayEntrePaginas}ms antes de la siguiente p√°gina...`)
        await page.waitForTimeout(CONFIG.delayEntrePaginas)
      }
    }

    // Guardar resultados completos
    const fs = await import('fs')
    const resultadosCompletos = {
      configuracion: CONFIG,
      resumen: {
        total_paginas_procesadas: paginasExitosas,
        total_paginas_solicitadas: CONFIG.maxPaginas,
        paginas_con_errores: errores.length,
        fecha_inicio: new Date().toISOString(),
        fecha_fin: new Date().toISOString(),
        total_productos_extraidos: todasLasPaginas.reduce((sum, pagina) => sum + pagina.total_productos, 0),
        promedio_productos_por_pagina: todasLasPaginas.length > 0 ? 
          Math.round(todasLasPaginas.reduce((sum, pagina) => sum + pagina.total_productos, 0) / todasLasPaginas.length) : 0,
        paginas_con_pocos_productos: todasLasPaginas.filter(p => p.total_productos < 15).length
      },
      errores: errores,
      paginas: todasLasPaginas
    }

    fs.writeFileSync('resultados_completos_final.json', JSON.stringify(resultadosCompletos, null, 2))

    await page.close()
    await browser.close()

    // Mostrar resumen final
    console.log('\nüìä Resumen final del scraping COMPLETO:')
    console.log(`‚úÖ P√°ginas exitosas: ${paginasExitosas}/${CONFIG.maxPaginas}`)
    console.log(`‚ùå P√°ginas con errores: ${errores.length}`)
    console.log(`üõçÔ∏è Total de productos extra√≠dos: ${resultadosCompletos.resumen.total_productos_extraidos}`)
    console.log(`üìà Promedio de productos por p√°gina: ${resultadosCompletos.resumen.promedio_productos_por_pagina}`)
    console.log(`‚ö†Ô∏è P√°ginas con pocos productos (<15): ${resultadosCompletos.resumen.paginas_con_pocos_productos}`)
    console.log(`üìÅ Archivos generados:`)
    console.log(`   - resultados_completos_final.json (todos los datos)`)
    if (CONFIG.guardarPorPagina) {
      for (let i = 1; i <= paginasExitosas; i++) {
        console.log(`   - resultados_completos_pagina_${i}.json`)
      }
    }
    
    if (errores.length > 0) {
      console.log('\n‚ö†Ô∏è Errores encontrados:')
      errores.forEach(error => {
        console.log(`   - P√°gina ${error.pagina}: ${error.error}`)
      })
    }

    console.log('üéâ ¬°Scraping COMPLETO finalizado!')

  } catch (error) {
    console.error('‚ùå Error general:', error.message)
    process.exit(1)
  }
}

main() 